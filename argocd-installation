in security group add port 6443 ipv4 and myip
first in ubuntu create user > change sh to bash > sudoers > sshd > 
PubkeyAuthentication yes
PasswordAuthentication yes
 > restart ssh > 

sudo mkdir -p /home/john/.ssh
sudo chown john:john /home/john/.ssh
sudo chmod 700 /home/john/.ssh

sudo touch /home/docker1/.ssh/authorized_keys
sudo chown docker1:docker1 /home/docker1/.ssh/authorized_keys
sudo chmod 600 /home/docker1/.ssh/authorized_keys

vi ansible.cfg (in ansible)
[defaults]
remote_tmp = /tmp/.ansible/tmp


sudo usermod -aG sudo john    (in k8s-master)

ansible-playbook playbook.yaml --ask-become-pass


In docker to collect generated auth
cat /root/docker/config.jason

In k8s cluster to edit the config.toml
vi /etc/containerd/config.toml


sudo kubeadm init --pod-network-cidr=10.244.0.0/16

sudo kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml --validate=false

kubeadm join 172.31.35.148:6443 --token 6ls8ub.6x406kjj5uj3u47i \
        --discovery-token-ca-cert-hash sha256:9325c8126dde44e634678a4cb82ebeabc116af42343d61a7287335759da80895



Install helm

https://helm.sh/docs/intro/install/

steps

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh


#Create argocd namespace

kubectl create namespace argocd
kubectl get namespace

#Install argocd file

helm repo add argo https://argoproj.github.io/argo-helm

helm install argocd argo/argo-cd --namespace argocd

helm list -n argocd

then run password command to >>>>> kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

WtnnqUeuX-sTT0td

after generating password, change the svc from cluster to nodeport

kubectl get pod -n argocd

kubectl get svc -n argocd

kubectl edit svc argocd-server -n argocd

kubectl get pod -n argocd

kubectl get svc -n argocd
(enable the port number in security firewall)   http and https

then login to argocd ui using username and password 


Your Kubernetes cluster setup is complete, with the master and worker nodes in a **ready state**. Here's what you need to do next:

---

### **Step 1: Verify Cluster Readiness**
- Confirm nodes are ready and pods in the `kube-system` namespace are running:
  ```bash
  kubectl get nodes
  kubectl get pods -n kube-system
  ```

### **Step 2: Install and Configure Argo CD**
1. **Install Argo CD using Helm**:
   - Add the Argo CD Helm repository:
sudo apt-get update

curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz -o helm-v3.12.0-linux-amd64.tar.gz
tar -zxvf helm-v3.12.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/helm

helm version


   - Install Argo CD in the `argocd` namespace:
     ```bash
     kubectl create namespace argocd
     helm repo add argo https://argoproj.github.io/argo-helm

     ```

2. **Verify Argo CD Installation**:
   - Check the pods in the `argocd` namespace:
     ```bash
     kubectl get pods -n argocd
helm repo update

helm install argocd argo/argo-cd --namespace argocd

     ```
   - Ensure all Argo CD components (e.g., server, application controller) are running.

3. **Expose Argo CD Server**:
kubectl expose deployment argocd-server --type=NodePort --name=argocd-server-svc -n argocd
kubectl get svc -n argocd
similar like this need to see 
NAME               TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
argocd-server-svc                  NodePort    10.111.194.193   <none>        8080:31621/TCP,8083:32386/TCP   7s
enable port number 31621 and 32386  in security wall
     ```

4. **Access Argo CD UI**:

     kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d

